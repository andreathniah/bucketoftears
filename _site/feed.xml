<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://andreathniah.github.io/bucketoftears/feed.xml" rel="self" type="application/atom+xml" /><link href="https://andreathniah.github.io/bucketoftears/" rel="alternate" type="text/html" /><updated>2021-06-22T22:37:07+08:00</updated><id>https://andreathniah.github.io/bucketoftears/feed.xml</id><title type="html">Bucket of Tears</title><subtitle>Cybersecurity is fun, but it is always so challenging that it makes me cry buckets of tears!</subtitle><entry><title type="html">OSCP Review</title><link href="https://andreathniah.github.io/bucketoftears/2021-06-21/oscp-review" rel="alternate" type="text/html" title="OSCP Review" /><published>2021-06-21T00:00:00+08:00</published><updated>2021-06-21T00:00:00+08:00</updated><id>https://andreathniah.github.io/bucketoftears/2021-06-21/oscp-review</id><content type="html" xml:base="https://andreathniah.github.io/bucketoftears/2021-06-21/oscp-review">&lt;p&gt;I have recently sat for the Offensive Security Certified Professional (OSCP) exam and passed in my first attempt with an estimated score of 77.5 points.&lt;/p&gt;

&lt;p&gt;Since I have benefited from many OSCP reviews such as this, I thought it would be a good idea for me to share my experience of the entire journey. The questions I found to be helpful when I was just another PWK student in search for tips were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What did you do to prepare before starting on the course?&lt;/li&gt;
  &lt;li&gt;How did you spend your lab time?&lt;/li&gt;
  &lt;li&gt;What was your exam strategy?&lt;/li&gt;
  &lt;li&gt;What tips do you have for us?&lt;/li&gt;
  &lt;li&gt;What do you plan to do next?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the risk of sounding just like every other post-exam review, here are my (very long) answers to that set of questions.&lt;/p&gt;

&lt;h3 id=&quot;1-what-tips-do-you-have-for-us&quot;&gt;1. What tips do you have for us?&lt;/h3&gt;

&lt;p&gt;This question is out of sequence, but I thought it should be addressed first given its importance. Here’s some practical tips that worked for me in no particular order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Make your own cheat sheet&lt;/strong&gt;. It should be as concise as possible and only serves as a reference page for you to remember what you have done before at one glance. (E.g. privilege escalation via Potato requires XYZ command)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Plan your exam day properly&lt;/strong&gt;. Do not try a new brand of coffee on the day itself. Stick to your routine. If you are the type that gets productive at 11am, consider starting your exam at 9am instead. Odds are you’ll be too worried to sleep well and would already be awake at 8am.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Proving Grounds is the best platform for exam preparation&lt;/strong&gt;. The community labelled easy and intermediate boxes are similar to those in the exam environment in terms of difficulty level. I suggest working on PG machines &lt;em&gt;only&lt;/em&gt; when you are already familiar with the methodology and are ready to do it without hints. I would factor in one month of PG practice before the exam date because it &lt;em&gt;&lt;strong&gt;will&lt;/strong&gt;&lt;/em&gt; give you a reality check.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You are in a rabbit hole if you repeat the same steps again and again while expecting different results&lt;/strong&gt;. Try another attack vector.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Try different ports if you have issues escalating from RCE to interactive shell&lt;/strong&gt;. I found that using the same port as the service you are exploiting when generating a reverse shell generally works well. (E.g. if there is a web server available at :80, try using :80 as your reverse shell port)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Take regular breaks&lt;/strong&gt;. While it is not intuitive, I find it knowing when to “give up” on an attack vector to be helpful. Go take a nap and come back to it later. Who knows, that attack vector would make more sense with a fresh set of eyes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;If the exploit script doesn’t work, DO IT MANUALLY&lt;/strong&gt;. I capitalized it for a reason. Go figure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Prepare your report beforehand&lt;/strong&gt;. Have a template at hand to easily insert your documentation. This helps to bootstrap your report writing. 24 hours is not very long when you didn’t sleep the entire day prior. No one wants to fail because of a terrible report right?!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;If you finish early, use that time to work on your documentation&lt;/strong&gt;. Replicate your exploitation process, take better screenshots, write short explanations on why you used XYZ commands. This helps to check if you have missed out anything and shorten the time needed to work on your report. If you still have time, feel free to chase after the remaining points.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Document as you work on a box&lt;/strong&gt;. This should be part of your methodology. Make it a habit to take screenshots, paste commands and write short notes of what you did at your choice of note-taking platform. I suggest cloud-based applications like OneNote in the event of a catastrophic event.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Read the instructions at your control panel before you start&lt;/strong&gt;. Please.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;reliance-on-hints-vs-try-harder-mentality&quot;&gt;Reliance on Hints vs “Try Harder” Mentality&lt;/h4&gt;

&lt;p&gt;Let’s have a quick discussion over the use of hints. I believe this is a topic that many agonized over while working on difficult boxes. While preparing for my own exam, I across this interesting &lt;a href=&quot;https://www.reddit.com/r/oscp/comments/m29gx4/oscp_practical_advice_for_success/&quot;&gt;perspective from u/FearfulFerret&lt;/a&gt; over at &lt;em&gt;r/oscp&lt;/em&gt; as thought that I should share.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;I decided it would be better to expose myself to as much material as possible in the time before the exam rather than beating my head against wall after wall; this worked well for me, but I think this is an area where everyone will be different. &lt;strong&gt;Looking at hints prioritizes exposing you to as large a variety of enumeration and exploitation techniques as you can. Foregoing hints prioritizes your methodology and drive.&lt;/strong&gt; Work on whichever seems more meaningful to you.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, work on whichever seems more meaningful to you. Personally, I find little advantage in banging my head against the wall for long hours. To obtain that sweet spot between over-reliance and “trying harder” to the point of tears, I have a checklist to complete before throwing my hands up in defeat.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have I been stuck for X hours?&lt;/li&gt;
  &lt;li&gt;Have I taken a short break?&lt;/li&gt;
  &lt;li&gt;Have I checked everything in my checklist after said break?&lt;/li&gt;
  &lt;li&gt;Am I lying to myself?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the answer is yes for all except the last, I would proceed to take a peek at the hints or walkthrough. If I find that it was something obvious that I missed out on, I would update my checklist (in bold red if necessary) so that I won’t miss it again. If I missed it because of a gap in knowledge, I would take some time to study the vulnerability and make sense of it. This way, I wouldn’t feel as if I had cheated since I am improving upon my process / learning new skills in both options.&lt;/p&gt;

&lt;p&gt;That said, we should still remember that there will be no guidance available when we are in the exam. Ultimately, as we learn and become much more confident in our methodology, we should strive to root boxes without hints.&lt;/p&gt;

&lt;h3 id=&quot;2-what-did-you-do-to-prepare-before-starting-on-the-course&quot;&gt;2. What did you do to prepare before starting on the course?&lt;/h3&gt;

&lt;p&gt;As a student pursuing a degree in information security, obtaining OSCP has always been something I have aimed to achieve. Unfortunately, due to limited purchasing power, OSCP was an expensive endeavor which I was willing to pursue &lt;em&gt;only&lt;/em&gt; when I was decently prepared.&lt;/p&gt;

&lt;p&gt;To get started on my journey towards OSCP, I first signed up at free platforms like TryHackMe and practiced on vulnerable machines there. This allowed me to get a feel of the methodology. Needless to say, I’ve referenced the walkthrough almost every step of the way.&lt;/p&gt;

&lt;p&gt;Once familiarized, I subscribed to HackTheBox (HTB) and started working on boxes listed in &lt;strong&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=0&quot;&gt;TJNull’s NetSecFocus Trophy Room&lt;/a&gt;.&lt;/strong&gt; After each HTB machine, I would &lt;strong&gt;do a review by watching &lt;a href=&quot;https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA&quot;&gt;Ippsec’s&lt;/a&gt;&lt;/strong&gt; – this helps me to identify alternative attack vectors and at times even understand underlying technology that made the attack possible.&lt;/p&gt;

&lt;p&gt;I realized very soon that I had severe knowledge gaps when it comes to privilege escalation. To tackle this, I bought &lt;strong&gt;&lt;a href=&quot;https://academy.tcm-sec.com/courses?query=privilege+escalation&quot;&gt;TCM Security Inc’s&lt;/a&gt; Windows and Linux Privilege Escalation course&lt;/strong&gt; bundle. I chose this over the wildly recommended privilege escalation course by &lt;a href=&quot;https://www.udemy.com/user/tib3rius/&quot;&gt;Tib3rius&lt;/a&gt; largely because it was cheap(er) and featured hands-on labs for every escalation method taught. In hindsight, however, I should have just bought both. I still suck at privilege escalation.&lt;/p&gt;

&lt;p&gt;Overall, I would categorize this period as “casual preparation” as they were done &lt;em&gt;extremely&lt;/em&gt; irregularly over the course of 2 years – largely due to the lack of discipline, school, internship and general life commitments.&lt;/p&gt;

&lt;h3 id=&quot;3-how-did-you-spend-your-lab-time&quot;&gt;3. How did you spend your lab time?&lt;/h3&gt;

&lt;p&gt;Before we continue, let’s set the stage for how much time I was able to dedicate to seriously prepare for this certification.&lt;/p&gt;

&lt;p&gt;At the point of course registration in March 2021, I was in my last semester of university and had fairly light workload. This allowed me to dedicate 3 days a week for a full month. After which, I would have to stop cold turkey for nearly 2 weeks due to final examinations (gal gotta study and graduate) before being able to spend 24/7 on the subsequent month focusing solely on the certification. In total, I had about 3 months of serious preparation before my scheduled exam in June 2021.&lt;/p&gt;

&lt;h4 id=&quot;offensive-security-official-labs&quot;&gt;Offensive Security Official Labs&lt;/h4&gt;

&lt;p&gt;I hit the ground running on the very first day of my 30 days lab time. I could only do this thanks to the preparation done prior to the registration of the course. While I did spend time reading the PDF from cover to cover, I elected to &lt;strong&gt;forgo the lab practice&lt;/strong&gt;. This was decided through a simple cost-benefit analysis that takes into consideration my schooling commitments and limited lab time.&lt;/p&gt;

&lt;p&gt;It’s helpful to mention here that I have had &lt;strong&gt;weekly study sessions&lt;/strong&gt; with folks from &lt;em&gt;Responsible Cyber&lt;/em&gt; – my previous internship company – who had also registered for the course. These study sessions kept me disciplined and also provided me with a sense of community. Studying alone is lonely after all.&lt;/p&gt;

&lt;p&gt;By the end of my 30 days of lab time, I had rooted 20 boxes. The subsequent 2 weeks were then spent on studying for my final examinations.&lt;/p&gt;

&lt;h4 id=&quot;tryhackme-buffer-overflow-prep&quot;&gt;TryHackMe Buffer Overflow Prep&lt;/h4&gt;

&lt;p&gt;Once school was done and dusted, I turned my focus back to OSCP.&lt;/p&gt;

&lt;p&gt;I first dedicated a weekend into getting used to Buffer Overflow. Since it was a topic already covered at school, I didn’t have much difficulty with it. The most useful resource I would recommend for this topic is &lt;strong&gt;&lt;a href=&quot;https://tryhackme.com/room/bufferoverflowprep&quot;&gt;TryHackMe’s OSCP Buffer Overflow Prep&lt;/a&gt;&lt;/strong&gt; room.&lt;/p&gt;

&lt;h4 id=&quot;offensive-security-proving-grounds&quot;&gt;Offensive Security Proving Grounds&lt;/h4&gt;

&lt;p&gt;After seeing tons of raving reviews about &lt;strong&gt;&lt;a href=&quot;https://www.offensive-security.com/labs/&quot;&gt;Offensive Security’s Proving Grounds&lt;/a&gt;&lt;/strong&gt;, I signed up for the practice subscription and promptly had my ass kicked by the easy and immediate boxes available. The difficulty level was so different from the course labs that I privately told my friends that &lt;em&gt;“I’ll be screwed if the difficulty level labeled on the boxes is an accurate reflection of the exam environment”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While subsequent boxes were rooted with conscious efforts to avoid any forms of hints in order to simulate the exam environment, I am not ashamed to admit that I relied on walkthroughs for the first ~10 boxes. I’ve discussed a bit about the tradeoff of relying on hints vs the “trying harder” mentality above so I won’t elaborate upon it here.&lt;/p&gt;

&lt;p&gt;All in all, I completed about 32 boxes from Proving Grounds within a month.&lt;/p&gt;

&lt;h4 id=&quot;summary-of-completed-boxes&quot;&gt;Summary of completed boxes&lt;/h4&gt;

&lt;p&gt;In total, I rooted &lt;strong&gt;77&lt;/strong&gt; boxes with nearly ~50 over the course of 4 months. The full list of machines can be found at the last section.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Offensive Security Official labs – 20&lt;/li&gt;
  &lt;li&gt;Offensive Security Proving Grounds Practice – 32&lt;/li&gt;
  &lt;li&gt;Hack the Box – 16&lt;/li&gt;
  &lt;li&gt;TryHackMe – 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-was-your-exam-strategy&quot;&gt;What was your exam strategy?&lt;/h3&gt;

&lt;p&gt;3 days before the exams, I stopped working on rooting any more boxes. The time was spent on resting and outlining a general strategy for the exam instead.&lt;/p&gt;

&lt;h4 id=&quot;strategy&quot;&gt;Strategy&lt;/h4&gt;

&lt;p&gt;In terms of tackling the boxes, I figured I would work on it in the following order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Finish buffer overflow (25 points) within 1 hour and run &lt;em&gt;autorecon&lt;/em&gt; on other machines in the meantime.&lt;/li&gt;
  &lt;li&gt;Obtain 10 points (root) &lt;em&gt;OR&lt;/em&gt; 20 points (user) depending on which seems easier via preliminary scan results.&lt;/li&gt;
  &lt;li&gt;Work on whatever that’s left.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, I gave up planning by step 2 because there were just too many variables at hand. Other miscellaneous stuff includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Taking 45mins breaks every 1.5hrs (with 30mins grace if I’m in the midst of something interesting).&lt;/li&gt;
  &lt;li&gt;Having lunch and dinner at regular timing away from my workstation.&lt;/li&gt;
  &lt;li&gt;Sleeping by 2am for at least 4 hours.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;reality&quot;&gt;Reality&lt;/h4&gt;

&lt;p&gt;In the end, it went as expected; no plans ever survive contact with the enemy after all. Here’s a rough breakdown on how my 24 hours went.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T~3 (3hrs for 10 point and BOF – including breaks + set up time)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spent 30 mins working on setup issues. While it ate into my time, it killed most of my nervousness.&lt;/li&gt;
  &lt;li&gt;Completed BOF within an hour. Made a mistake but was able to quickly recognize the moment I’ve veered off and managed to get back on track.&lt;/li&gt;
  &lt;li&gt;Worked on 10 pointer next and was able to spot the vulnerability within a short amount of time. Obtained root within an hour.&lt;/li&gt;
  &lt;li&gt;Took a 20min break.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;T~9 (6hrs for 20 pointer – including breaks)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Got stuck at 20 pointer for 2.5hrs and was switching back and forth with another 20 pointer machine. No progress for both.&lt;/li&gt;
  &lt;li&gt;Took a 1hr break.&lt;/li&gt;
  &lt;li&gt;Obtained root for 20 pointer within 2hrs. I had overlooked a piece of information that I had previously wrote off as unimportant.&lt;/li&gt;
  &lt;li&gt;Took a 30mins break.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;T~16 (7hrs for 25 pointer – including breaks)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Obtained user shell for 25 pointer within 1.5hr.&lt;/li&gt;
  &lt;li&gt;Took a 20mins break.&lt;/li&gt;
  &lt;li&gt;Got stuck at privilege escalation for 1.5hr.&lt;/li&gt;
  &lt;li&gt;Took another 30mins break.&lt;/li&gt;
  &lt;li&gt;No progress on escalation for another hour.&lt;/li&gt;
  &lt;li&gt;Took 1hr break to shower.&lt;/li&gt;
  &lt;li&gt;Still stuck at escalation for another hour ☹️&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;T~18.5 (2.5hrs for sleep)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decided that it was time to sleep since &lt;em&gt;brain.exe&lt;/em&gt; has stalled. I’ll let you know that I had actually dreamed about rooting the 25 pointer and was absolutely &lt;em&gt;crushed&lt;/em&gt; when I woke up 😢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;T~19.5 (1hr for 20 pointer)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Switched to work on another 20 pointer. I was able to climb out of the rabbit holes I was previously stuck in and obtained user within an hour. I have now obtained enough points to pass 🎉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;T~22.5 (3hrs to wrap up)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Took a short break and tried to privilege escalate for the 20 pointer to no avail – I was too tired to really think. Instead of pressing on, I decided to replicate the exploitation process for all other boxes and work on documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I had doubled, tripled and quadrupled checked that I had submitted the right proof keys for the right IP address and had all my screenshots with me, I thanked the proctor and ended the exam.&lt;/p&gt;

&lt;p&gt;After a glorious 5 hours of sleep, I took my time to compile my report and uploaded it. 3 long days of constantly checking my email later, I have finally got the long awaited email!&lt;/p&gt;

&lt;p&gt;I am now an OSCP!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/202106_oscp/oscp-results.png&quot; alt=&quot;OSCP email&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-do-you-plan-to-do-next&quot;&gt;What do you plan to do next?&lt;/h3&gt;

&lt;p&gt;On top of my head, there’s a couple stuff I want to try out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bug bounty&lt;/strong&gt; is one. I have tried my hand at it but realized that I need to up my game at my practical reconnaissance methodology before getting my hands dirty into the technical bits. One can’t hunt for exploits when one doesn’t even know what assets are available.&lt;/p&gt;

&lt;p&gt;Certification wise, achieving &lt;strong&gt;&lt;a href=&quot;https://www.offensive-security.com/awae-oswe/&quot;&gt;Offensive Security Web Experience&lt;/a&gt;&lt;/strong&gt; (OSWE) is certainly a target. Unfortunately, I have little development experience and zero knowledge on source code review. Since I prefer to be decently prepared before I shell out the amount of money OSWE requires, this will be on the back burner for a while.&lt;/p&gt;

&lt;p&gt;Another certification that I’m considering is the &lt;strong&gt;&lt;a href=&quot;https://certifications.tcm-sec.com/&quot;&gt;Practical Network Penetration Tester&lt;/a&gt;&lt;/strong&gt; (PNPT) certification from TCM Security, Inc. It’s fairly new, but I feel that it would be a natural progression from OSCP as the exam scope features Active Directory exploitation to compromise the exam Domain Controller. Definitely sounds like a challenge.&lt;/p&gt;

&lt;p&gt;That said, I’ve actually just started a full time position and would need some time to get used to the work environment – I suppose I’ll get into these sometime in 2022. Meanwhile, I shall be content with keeping my skills sharp by rooting active HTB machines.&lt;/p&gt;

&lt;h3 id=&quot;special-thanks&quot;&gt;Special thanks!&lt;/h3&gt;

&lt;p&gt;No success can be attained alone.&lt;/p&gt;

&lt;p&gt;Some of my biggest motivators for this certification – and cybersecurity in general – are my bosses and mentors from the various startups I’ve interned in. They were the ones who introduced me into the world of penetration testing (&lt;a href=&quot;https://www.horangi.com/&quot;&gt;@horangi&lt;/a&gt;), helped me along with explaining sections of walkthrough when I’m stuck (&lt;a href=&quot;https://www.ecobee.com/&quot;&gt;@ecobee&lt;/a&gt;) and organized weekly study session to make sure I’m disciplined throughout the final months of preparing for the exam (&lt;a href=&quot;https://responsible-cyber.com/&quot;&gt;@responsiblecyber&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Not to forget my university friends who had helped and encouraged me throughout this journey. In particular to Jerome, who had the dubious honor of dealing with my frantic fretting and general exam anxiety. Thanks bruh. Honestly won’t be able to do it without y’all.&lt;/p&gt;

&lt;p&gt;Last but not least, to &lt;strong&gt;Woman on Cyber&lt;/strong&gt; (&lt;a href=&quot;https://twitter.com/womenoncyber&quot;&gt;@womenoncyber&lt;/a&gt;) for sponsoring my PWK course + exam voucher. Do &lt;a href=&quot;https://women-on-cyber.com/scholarship/&quot;&gt;check them out&lt;/a&gt; if you are based in Singapore!&lt;/p&gt;

&lt;h3 id=&quot;list-of-completed-boxes&quot;&gt;List of completed boxes&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../assets/202106_oscp/boxes-thm.png&quot; alt=&quot;TryHackMe&quot; /&gt;
&lt;img src=&quot;../assets/202106_oscp/boxes-htb.png&quot; alt=&quot;HackTheBox&quot; /&gt;
&lt;img src=&quot;../assets/202106_oscp/boxes-pg.png&quot; alt=&quot;ProvingGrounds&quot; /&gt;&lt;/p&gt;</content><author><name>BoT</name></author><category term="cybersecurity" /><category term="certification" /><summary type="html">I have recently sat for the Offensive Security Certified Professional (OSCP) exam and passed in my first attempt with an estimated score of 77.5 points.</summary></entry><entry><title type="html">SecTor 2019</title><link href="https://andreathniah.github.io/bucketoftears/2019-10-20/sector" rel="alternate" type="text/html" title="SecTor 2019" /><published>2019-10-20T00:00:00+08:00</published><updated>2019-10-20T00:00:00+08:00</updated><id>https://andreathniah.github.io/bucketoftears/2019-10-20/sector</id><content type="html" xml:base="https://andreathniah.github.io/bucketoftears/2019-10-20/sector">&lt;p&gt;SecTor is one of Canada’s biggest security conference and I was lucky enough to snag a ticket from &lt;a href=&quot;https://owasp.org/www-chapter-toronto/&quot;&gt;OWASP Toronto Chapter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is also the first security event that I went together with folks from @ecobee. Lee – my super supportive boss – even had extra tickets for me to participate in the after-party. Unfortunately, I had classes that night. Boooooooo!!&lt;/p&gt;

&lt;h2 id=&quot;sector-2019-ctf&quot;&gt;SecTor 2019 CTF&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Event name&lt;/strong&gt;: SecTor 2019&lt;br /&gt;
&lt;strong&gt;Location&lt;/strong&gt;: Metro Toronto Convention Centre&lt;br /&gt;
&lt;strong&gt;Date&lt;/strong&gt;: 09/10/2019 - 10/10/2019&lt;br /&gt;
&lt;strong&gt;Team&lt;/strong&gt;: Individual&lt;/p&gt;

&lt;p&gt;Upon registration, all attendees are given a physical copy of a pocket guide that details the conference details. Looking closely at one of the pages, we can see that a CTF is totally taking place!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/0_physicalpocketguide.jpg&quot; alt=&quot;0_physicalpocketguide&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flag-1&quot;&gt;Flag 1&lt;/h3&gt;

&lt;p&gt;Squinting at the far left of the image, we see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; encoded string, &lt;em&gt;interesting&lt;/em&gt;! Following the instructions on the page, I eventually found the &lt;em&gt;Nuix + Dolos Group&lt;/em&gt; booth at Hall 700 and was given the link to the CTF platform: &lt;a href=&quot;sectorctf2019.online&quot;&gt;sector2019ctf.online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the cute entrance page we are greeted with!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/1_enterance.PNG&quot; alt=&quot;1_enterance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We first started out by taking a quick look at the source code via developer tools. Oh hey an image was commented out! Accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sectorctf2019.online/images/2019_pocket_guide.png&lt;/code&gt; led us to a blown up image of what we see in the physical guide book. Great! Now we can programmatically extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; text to decode them!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/1_inspectme.PNG&quot; alt=&quot;1_inspectme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/1_pocketguide.png&quot; alt=&quot;1_pocket_guide&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, we went through the long process of rotating the image, cropping the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; text and run them though an online &lt;a href=&quot;https://www.onlineocr.net/&quot;&gt;Optical Character Recognition tool&lt;/a&gt;. We eventually realized that we can actually just open up the image as text (rename the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;png&lt;/code&gt; extension to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txt&lt;/code&gt;, or plain old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings&lt;/code&gt; command) to grab the string. Simple!&lt;/p&gt;

&lt;p&gt;Nevertheless, we got our string and here’s what is was decoded to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;QWxsIGZsYWdzIHdpbGwgYmUgdXNlIHRoZSBmb3JtYXQgJ1NlY1RvcltmbGFnXScuIEUuRy4gU2VjVG9yW1RoaXNfaXNfbjB0X2FfZmxhZ10=&quot; | base64 --decode

All flags will be use the format &apos;SecTor[flag]&apos;. E.G. SecTor[This_is_n0t_a_flag]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aww man, it wasn’t a flag :(&lt;/p&gt;

&lt;p&gt;But that’s okay, because clicking through other links on the webpage led us to your flag with the abovementioned flag format! Woohooo!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/1_flag.PNG&quot; alt=&quot;1_flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag 1: SecTor[Go on till you come to the end, then stop.]&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;flag-2&quot;&gt;Flag 2&lt;/h3&gt;

&lt;p&gt;Based on the instructions on the first flag, we proceed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sectorctf2019.online/knock/knock/packets.pcap&lt;/code&gt; and were given a &lt;a href=&quot;./source/packets.pcap&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcap&lt;/code&gt;&lt;/a&gt; file. As the extension suggests, its a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireshark&lt;/code&gt; file. Filtering the results for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http2&lt;/code&gt;, we spotted something! It seems that our victim was trying to download an achieved file from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sectorctf2019.online/Doorknob.7z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try to download them via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/2_wget.PNG&quot; alt=&quot;2_wget&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nope, we got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;404&lt;/code&gt; status code. That’s fine because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireshark&lt;/code&gt; could totally help us achieve the same result since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireshark&lt;/code&gt; captured the complete file bytes of the 7zip file.&lt;/p&gt;

&lt;p&gt;We can recreate this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; file by right clicking the highlighted bytes and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Export Packet Bytes&lt;/code&gt;. A cursory search on Google teaches us that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7z&lt;/code&gt; is another form of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; file, unfortunately, unzipping via Linux command proves to be rather hard, so we went through the long route of transferring the file over to Windows, extract them, then return it back to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kali Linux&lt;/code&gt; virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/2_wireshark.PNG&quot; alt=&quot;2_wireshark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here comes the weird part – the extracted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Doorknob&lt;/code&gt; file doesn’t run even with permissions granted via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod +x Doorknob&lt;/code&gt;. So frustrating!&lt;/p&gt;

&lt;p&gt;It was only after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; command when we realized what went wrong – the environment we are running the file on!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Doorknob: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=b56ea019612628ce072f1a58c5708bcaad3d3934, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Doorknob&lt;/code&gt; here is says it runs on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86-64&lt;/code&gt;, perhaps our virtual machine is not of the same environment? The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname -m&lt;/code&gt; command revealed that our suspicion was right. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kali Linux&lt;/code&gt; runs on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i686&lt;/code&gt;! Thank god we have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt; - which conveniently runs on the required environment - virtual machine at hand!&lt;/p&gt;

&lt;p&gt;Yep, we got our flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/2_flag.PNG&quot; alt=&quot;2_flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag 2: SecTor[No, I do mean impassible. Nothing’s impossible!]&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;flag-3&quot;&gt;Flag 3&lt;/h3&gt;

&lt;p&gt;Downloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sectorctf2019.online/stage/B/binary.pdf&lt;/code&gt;, we obtain a rather interesting &lt;a href=&quot;./source/binary.pdf&quot;&gt;PDF file&lt;/a&gt; – we see a bunch of binary numbers!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01010110 01101101 01001110 01110010 01001001 01000111 01010010 01110000 01100010 01101101
00110101 00110110 01100100 00110010 01001010 00110001 01001001 01000111 00111001 00110110

[TRUNCATED]

01101000 01110100 01011001 00110010 01010010 01111000 01001001 01000101 01100111 01100111
01011010 01101101 01010010 01111010 01001100 01100111 00111101 00111101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Converting these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ascii&lt;/code&gt; with space as the delimiter, we obtain a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; string which can further be decoded to the output shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_sector/3_binarybase64.PNG&quot; alt=&quot;3_binarybase64&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hmm, the output doesn’t make sense. But it seems that this could be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROT13&lt;/code&gt; cipher, given that its linguistic properties look awfully similar English’s structure. Going with that line of thought, we can identify words with single letters to be either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;. The fact that different lines of single letter words are encoded in different letters suggests that each line might be wrapped with different values.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[TRUNCATED]
Rfc fsppgcp G em,
sgd adghmcdq H fds.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It turns out we were right, each line of this output requires a decreasing amount of wrap! Starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt; down to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, here’s the output we get:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;How puzzling all these chanes are!
I&apos;m never sure what I&apos;m going to be,
from one minute to another.
I don&apos;t see how he can ever finish[
if he doesn&apos;t begin]
The time has come, the walrus said
to tal, of many things[
Of shoes and ships ]
and sealig wax -
Password[Of c4bbag3s and k1ngs]
The hurrier I go,
the behinder I get.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Anddddd…&lt;/em&gt; I officially gave up here. Let’s hope someone wrote a writeup about this challenge so I can figure out what I missed!&lt;/p&gt;</content><author><name>BoT</name></author><category term="cybersecurity" /><category term="ctf" /><summary type="html">SecTor is one of Canada’s biggest security conference and I was lucky enough to snag a ticket from OWASP Toronto Chapter.</summary></entry><entry><title type="html">Bsides Toronto 2019</title><link href="https://andreathniah.github.io/bucketoftears/2019-10-17/bsides-toronto" rel="alternate" type="text/html" title="Bsides Toronto 2019" /><published>2019-10-17T00:00:00+08:00</published><updated>2019-10-17T00:00:00+08:00</updated><id>https://andreathniah.github.io/bucketoftears/2019-10-17/bsides-toronto</id><content type="html" xml:base="https://andreathniah.github.io/bucketoftears/2019-10-17/bsides-toronto">&lt;p&gt;Another day, another security event. Unlike Day of Shecurity (DOS) – whose CTF were mainly catered for begineers – Bsides Toronto’s CTF was very much harder.&lt;/p&gt;

&lt;p&gt;Coincidently, I banged into folks I’ve met while in DOS at this event and was lucky enough to team with Brandon from ThreatGRID Cisco where I learned tons from picking his brains for ideas and solutions!&lt;/p&gt;

&lt;h2 id=&quot;bsides-toronto-2019-ctf&quot;&gt;Bsides Toronto 2019 CTF&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Event name&lt;/strong&gt;: Bsides Toronto 2019&lt;br /&gt;
&lt;strong&gt;Location&lt;/strong&gt;: Ryerson University&lt;br /&gt;
&lt;strong&gt;Date&lt;/strong&gt;: 06/10/2019&lt;br /&gt;
&lt;strong&gt;Team&lt;/strong&gt;: BoT&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_bsidesto/results.PNG&quot; alt=&quot;Results&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-encrypted&quot;&gt;[Web] Encrypted&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This simple file contains 3 flags. Can you dig deep enough?&lt;/p&gt;

  &lt;p&gt;01100001 01010110 01100101 01110010 01111001 01010011 01110100 01110010 01101111 01101110 01100111 01010000 01100001 01110011 01110011 01110000 01101000 01110010 01100001 01110011 01100101&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;&quot;&gt;FILE.zip.gpg&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After decoding binary to ASCII via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64 --decode&lt;/code&gt;, we obtained &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aVeryStrongPassphrase&lt;/code&gt;. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file FILE.zip.gpg&lt;/code&gt;, we obtain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE.zip.gpg: GPG symmetrically encrypted data (AES cipher)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Entering the passphrase when prompted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpg FILE.zip.gpg&lt;/code&gt; would produce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.jpg&lt;/code&gt; for this challenge and the next challenge respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: ykhti36b2thircqwr31sm17x7wpxsj4b&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-crawler&quot;&gt;[Web] Crawler&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;What page does a crawler check to see where he can and cannot go? Use the server &lt;a href=&quot;http://beginner-web.hfctf.org/&quot;&gt;beginner-web.hfctf.org&lt;/a&gt;. The answer is a full flag not just the file name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are greeted with a default apache page here. Given the challenge name, accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beginner-web.hfctf.org/robots.txt&lt;/code&gt; provides us with our flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-DA371569A494D6953447F68C2F6316B2&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-port-scan&quot;&gt;[Web] Port Scan&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;By default, nmap will only scan the top 1000 ports. Can you learn how to fix this? If you find a weird port, you can poke it with nc (netcat).&lt;/p&gt;

  &lt;p&gt;Address: &lt;a href=&quot;http://beginner-web.hfctf.org/&quot;&gt;beginner-web.hfctf.org&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;Recommended Tools: nmap, nc (netcat)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the manual, we know that to scan all ports, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p-&lt;/code&gt; flag is needed.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -sC -sV -p- -oA hackfest beginner-web.hfctf.org

# Nmap 7.70 scan initiated Sun Oct  6 10:08:55 2019 as: nmap -sC -sV -p- -oA hackfest beginner-web.hfctf.org
Nmap scan report for beginner-web.hfctf.org (3.92.223.240)
Host is up (0.00052s latency).
rDNS record for 3.92.223.240: ec2-3-92-223-240.compute-1.amazonaws.com
Not shown: 65531 filtered ports
PORT      STATE SERVICE    VERSION
22/tcp    open  tcpwrapped
| ssh-hostkey:
|   2048 8c:86:62:de:2d:34:11:8c:39:86:c4:a8:03:10:3d:fd (RSA)
|   256 e4:7b:74:cb:34:f3:ab:b8:5f:60:d4:0a:de:d0:13:c7 (ECDSA)
|_  256 70:2d:af:8a:68:e1:f5:94:a7:97:a0:54:f8:b5:85:02 (ED25519)
53/tcp    open  tcpwrapped
80/tcp    open  tcpwrapped
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
13337/tcp open  tcpwrapped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We see here that port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13337&lt;/code&gt; opened. Probing it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc begineer-web.hfctf.org 13337&lt;/code&gt; will return us with the flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-6DA40A2D1CBA006ABAC5663543B69994&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;cipher-base64&quot;&gt;[Cipher] Base64&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you see a string that seems encoded, contains only numbers, letters, / and = and might finish with either one or two = (but not all the time) you should try this decoding method. It is also used by pentesters to transfer files over the network and to make sure we are not missing any parts.&lt;/p&gt;

  &lt;p&gt;Here is the string : SEYtNmQzZTdmMTlhNjhlM2FjOWY4ZGM2ODNhYTJlNjFlZDY=&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can decode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;SEYtNmQzZTdmMTlhNjhlM2FjOWY4ZGM2ODNhYTJlNjFlZDY=&quot; | base64 --decode&lt;/code&gt; to return us the flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-6d3e7f19a68e3ac9f8dc683aa2e61ed6&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;cipher-julius&quot;&gt;[Cipher] Julius&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the first used cipher in history.&lt;/p&gt;

  &lt;p&gt;XV-vvrru3u1627s71rvru5suut8sus9s6q9&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Caesar cipher is named after Julius Caesar and is one of the earliest known and simplest cipher. Essentially a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROT13&lt;/code&gt; cipher, key 10 would give us our flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_bsidesto/julius.PNG&quot; alt=&quot;julius&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-ffbbe3e1627c71bfbe5ceed8cec9c6a9&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;linux-ssh-key&quot;&gt;[Linux] SSH Key&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;You are given an SSH key to the kingdom, do you know how to use it?&lt;/p&gt;

  &lt;p&gt;If you do, use it at &lt;a href=&quot;http://beginner-linux.hfctf.org/&quot;&gt;beginner-linux.hfctf.org&lt;/a&gt; with the user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cerealkiller&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod 600 id_ed25519
ssh -i id_ed25519 cerealkiller@beginner-linux.hfctf.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_bsidesto/ssh.PNG&quot; alt=&quot;ssh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checking the directory, we see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt; file! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;-ing the contents would provide us with our flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-D9641062F62354ABC92EFB2988D78FFC&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;linux-hidden-file&quot;&gt;[Linux] Hidden File&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Get a shell as the user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cerealkiller&lt;/code&gt; with the previous SSH key and look for a hidden file.&lt;/p&gt;

  &lt;p&gt;Requirement: You need to have done the SSH Challenge first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_bsidesto/hiddenfile.PNG&quot; alt=&quot;hiddenfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Examining the directory carefully, we see a hidden folder named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.hidden&lt;/code&gt;. Accessing it, we see another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt; file. The contents reveals our flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-48A5B31EDB33E1DA01913DD63AF8707D&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;linux-sudo&quot;&gt;[Linux] Sudo&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cerealkiller&lt;/code&gt; has some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; privileges. Learn to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to be able to read the flag in the user “phantom” home directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;, we can check what kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; privileges &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cerealkiller&lt;/code&gt; has:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Matching Defaults entries for cerealkiller on ip-172-31-82-137:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User cerealkiller may run the following commands on ip-172-31-82-137:
    (phantom) NOPASSWD: ALL
    (vimuser) NOPASSWD: /usr/bin/vim
    (nmapuser) NOPASSWD: /usr/bin/nmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From here, we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cerealkiller&lt;/code&gt; can access all of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phantom&lt;/code&gt;’s file. That means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat home/phantom/flag.txt&lt;/code&gt; would work right? Nope! We got a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permission denied&lt;/code&gt; error message. &lt;em&gt;Whyyyy?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is because &lt;strong&gt;EXPLAINATION HERE&lt;/strong&gt;. To get our flag, we should assume &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phantom&lt;/code&gt;’s’ identity to read the file via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -u phantom cat flag.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_bsidesto/sudo.PNG&quot; alt=&quot;sudo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-37C24811BDAC007720BB8FF868386C0F&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;linux-vim&quot;&gt;[Linux] Vim&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vim is a popular text editor for Linux, but there are a lot more that you can do with it rather than just editing text. Can you find out what?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I learnt lots of stuff today and this was one that blew my mind away.&lt;/p&gt;

&lt;p&gt;Just like before, we start by assuming the identity of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vimuser&lt;/code&gt; to create a vim file through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -u vimuser vim switch.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we are in a new vim file, we can spawn a new bash terminal with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!/bin/sh&lt;/code&gt; through vim’s terminal! With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whoami&lt;/code&gt; command, we can confirm that we are currently logged in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vimuser&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accessing the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/vimuser/flag.txt&lt;/code&gt; would give us our flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: HF-0224B9BFA1235B2D5CE597E73B089C3C&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;crypto-hash-you-said-hash&quot;&gt;[Crypto] Hash you said Hash?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve found a hash and I’m sure it’s my password for my file ;( how can I know what it is?&lt;/p&gt;

  &lt;p&gt;Can you help me!&lt;/p&gt;

  &lt;p&gt;Hash: 7740b5345bc0f61056c125db6fae5bfc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using an &lt;a href=&quot;https://crackstation.net/&quot;&gt;online tool&lt;/a&gt;, we can easily crack the hash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7740b5345bc0f61056c125db6fae5bfc&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1INFRASTRUCTURES&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;privacy-lazytiger&quot;&gt;[Privacy] LazyTiger&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s incredible all we can see on this picture! A Lazy Tiger surely! but…..&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;&quot;&gt;LazyTiger&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; shows us a bunch of interesting details on where the photograph was taken.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExifTool Version Number         : 11.16
File Name                       : LazyTiger.jpg
Directory                       : .
File Size                       : 382 kB
File Modification Date/Time     : 2019:10:06 12:48:08-04:00
File Access Date/Time           : 2019:10:06 12:48:22-04:00
File Inode Change Date/Time     : 2019:10:06 12:48:10-04:00
File Permissions                : rw-r--r--
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
JFIF Version                    : 1.01
X Resolution                    : 96
Y Resolution                    : 96
Exif Byte Order                 : Big-endian (Motorola, MM)
Make                            : TigerBrand
Camera Model Name               : SuperPro
Resolution Unit                 : None
Y Cb Cr Positioning             : Centered
Exif Version                    : 0230
Components Configuration        : Y, Cb, Cr, -
Flashpix Version                : 0100
Lens Make                       : ATM
Lens Model                      : CTF
Lens Serial Number              : 666C61677B6173747574655F74696765727D
GPS Latitude Ref                : North
GPS Longitude Ref               : East
Padding                         : (Binary data 2060 bytes, use -b option to extract)
IPTC Digest                     : d41d8cd98f00b204e9800998ecf8427e
Warning                         : [minor] Fixed incorrect URI for xmlns:MicrosoftPhoto
About                           : uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b
Camera Serial Number            : 666C61677B6173747574655F74696765727D
Image Width                     : 1200
Image Height                    : 900
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)
GPS Latitude                    : 53 deg 33&apos; 53.95&quot; N
GPS Longitude                   : 106 deg 17&apos; 42.92&quot; E
GPS Position                    : 53 deg 33&apos; 53.95&quot; N, 106 deg 17&apos; 42.92&quot; E
Image Size                      : 1200x900
Megapixels                      : 1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the challenge description being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;privacy&lt;/code&gt;, I thought that the GPS position would be important. Converting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53 deg 33&apos; 53.95&quot; N, 106 deg 17&apos; 42.92&quot; E&lt;/code&gt; to decimals: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53.5649861,106.29525555555556&lt;/code&gt; revealed that the picture was taken at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kachugsky District, Irkutsk Oblast, Russia&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After discussing this challenge with Brandon, he noticed that the serial number could actually be decoded to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hex&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;print(&apos;666C61677B6173747574655F74696765727D&apos;.decode(&apos;hex&apos;))&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astute_tiger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Flag: flag{astute_tiger}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;sdr-look-around&quot;&gt;[SDR] Look around…&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Head to https://sdr.hfctf.org/&lt;/p&gt;

  &lt;p&gt;Look around this webpage. Can-you find anything revolving around the “CDN” it uses?&lt;/p&gt;

  &lt;p&gt;Flag is case-sensitive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Poking around the site for any CDN related words, a network request caught my eye!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_bsidesto/lookaround.PNG&quot; alt=&quot;lookaround&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://sdr-cdn.hfctf.org/images/pic02.jpg&lt;/code&gt; redirected me to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://s3.us-east-1.amazonaws.com/flag-qg7y1k1cjjozpov03uwn/images/pic02.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We found our flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: flag-qg7y1k1cjjozpov03uwn&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;sdr-look-into-the-clouds&quot;&gt;[SDR] Look into the clouds&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Head to https://sdr.hfctf.org/&lt;/p&gt;

  &lt;p&gt;Look around this webpage. Can-you do some kind of modern-day directory-listing?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Continuing from the previous challenge, we obtain the link of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://s3.us-east-1.amazonaws.com/flag-qg7y1k1cjjozpov03uwn/images/pic02.jpg&lt;/code&gt;, what happens when we traverse back the directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201910_bsidesto/lookintotheclouds_xml.PNG&quot; alt=&quot;lookintotheclouds_xml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oooh, an XML file. Beautiful. At the very bottom, we see something suspicious!&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Contents&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;Key&amp;gt;&lt;/span&gt;you_should_not_see_this_file.txt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;LastModified&amp;gt;&lt;/span&gt;2019-06-04T03:54:13.000Z&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LastModified&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ETag&amp;gt;&lt;/span&gt;&quot;07f0425001b94325d04e542fb8ef23bd&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ETag&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;Size&amp;gt;&lt;/span&gt;26&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Size&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;StorageClass&amp;gt;&lt;/span&gt;STANDARD&lt;span class=&quot;nt&quot;&gt;&amp;lt;/StorageClass&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Contents&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://s3.us-east-1.amazonaws.com/flag-qg7y1k1cjjozpov03uwn/you_should_not_see_this_file.txt&lt;/code&gt; gives us our flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: FLAG-bKrdxHOcXwDkOnWb6i4p&lt;/strong&gt;&lt;/p&gt;</content><author><name>BoT</name></author><category term="cybersecurity" /><category term="ctf" /><summary type="html">Another day, another security event. Unlike Day of Shecurity (DOS) – whose CTF were mainly catered for begineers – Bsides Toronto’s CTF was very much harder.</summary></entry><entry><title type="html">Day of Shecurity 2019</title><link href="https://andreathniah.github.io/bucketoftears/2019-09-28/day-of-shecurity" rel="alternate" type="text/html" title="Day of Shecurity 2019" /><published>2019-09-28T00:00:00+08:00</published><updated>2019-09-28T00:00:00+08:00</updated><id>https://andreathniah.github.io/bucketoftears/2019-09-28/day-of-shecurity</id><content type="html" xml:base="https://andreathniah.github.io/bucketoftears/2019-09-28/day-of-shecurity">&lt;p&gt;It has been a couple of months since I’ve step afoot into &lt;del&gt;the land of raccoons&lt;/del&gt; Canada and I thought that is high time for me to immerse myself into the security community here at downtown Toronto.&lt;/p&gt;

&lt;p&gt;Day of Shecurity is one of the very first event that I participated in and had tons of fun working on the CTF with folks I’ve met there.&lt;/p&gt;

&lt;p&gt;Here’s some of the challenges writeup.&lt;/p&gt;

&lt;h2 id=&quot;flag-queen-2019&quot;&gt;Flag Queen 2019&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Event name&lt;/strong&gt;: Day of Shecurity Toronto 2019&lt;br /&gt;
&lt;strong&gt;Location&lt;/strong&gt;: George Brown College&lt;br /&gt;
&lt;strong&gt;Date&lt;/strong&gt;: 14/09/2019 - 18/09/2019&lt;br /&gt;
&lt;strong&gt;Team&lt;/strong&gt;: BoT&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/Results.PNG&quot; alt=&quot;Results&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flag-queen-veni-vidi-vici&quot;&gt;[Flag Queen] Veni, vidi, vici&lt;/h3&gt;

&lt;p&gt;Upon registration, all participants receive a card that looks like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/FlagQueen.png&quot; alt=&quot;FlagQueen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The line at the bottom looks weird but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;://&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.klm/&lt;/code&gt; was a dead giveaway that it was a URL link. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROT13 cipher&lt;/code&gt; easily reveal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uggcf://qnlbsfurphevgl.klm&lt;/code&gt; to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://dayofshecurity.xyz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: https://dayofshecurity.xyz&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-oh-yes-little-bobby-tables-we-call-him&quot;&gt;[Web] Oh, yes. Little Bobby Tables we call him&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The backend devs of this Super Secure Site (TM) thought they’d protected their users’ personal data. But, they’ve missed some things.&lt;/p&gt;

  &lt;p&gt;First you find the data, then you get the points, then you get the power.&lt;/p&gt;

  &lt;p&gt;https://chmodxx.net/dos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the challenge named &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;Little Bobby&lt;/a&gt;, there was little to no doubt that this challenge requires some form of SQL injection. With that in mind, I did a quick survey on the website in general. It only consist of a normal login page with some form of validation being enforced. Poking around, I noticed that any attempt to submit data from the frontend would have their data sanitized with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serialize()&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/BobbyTables_Javascript.PNG&quot; alt=&quot;BobbyTables_Javascript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nevertheless, I tried the usual SQL injection statement to see if the login form is vulnerable. Lo and behold, it is. Now that I know that the site vulnerable from the frontend attack vector, I proceed to check the backend too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/BobbyTables_FatalError.PNG&quot; alt=&quot;BobbyTables_FatalError&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copying the request I made from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt; panel as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; request, I tried submitting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;1 or 1=1--&lt;/code&gt; as the injection statement. Nope, that didn’t work out – I got the same fatal error as above. When I changed the injection statement to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos; or 1=1--&lt;/code&gt; though, I got something different, which unfortunately, is not the flag. &lt;em&gt;Whyyyyy?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/BobbyTables_Failcurl.PNG&quot; alt=&quot;BobbyTables_Failcurl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/BobbyTables_Successfulcurl.PNG&quot; alt=&quot;BobbyTables_curl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The answer lies in how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; request was constructed. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; I used contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cookie&lt;/code&gt; value specific to the browser session hence even if the injection were successful, I wouldn’t have been able to see anything within the terminal. I actually needed to go back to my browser that &lt;em&gt;hasn’t been closed&lt;/em&gt; and &lt;em&gt;refresh&lt;/em&gt; the page to see the flag!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://chmodxx.net/dos/submit.php&quot;
	[TRUNCATED]
-H &quot;Cookie: PHPSESSID=5uj69calgmr27fk839lo33hc80&quot; -H &quot;Connection: keep-alive&quot; -H &quot;DNT: 1&quot; --data &quot;email=%27%20or%201%3D1--&amp;amp;password=sadfsdf&quot; --compressed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/BobbyTables_Admin.PNG&quot; alt=&quot;BobbyTables_Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: {FLAG:AND1HOPEUVELEARNED2SANITIZEYOURINPUT5}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;hunting-easter-egg-hunt&quot;&gt;[Hunting] Easter Egg Hunt&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I wonder what else is going on on this vserver…&lt;/p&gt;

  &lt;p&gt;You’ll learn some useful skills for this challenge at “Reversing and Exploring The World of Mobile Apps: Android APKs”&lt;/p&gt;

  &lt;p&gt;URL: &lt;a href=&quot;https://dayofshecurity.xyz&quot;&gt;https://dayofshecurity.xyz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Googling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vserver&lt;/code&gt; reveals that this is just a term for virtual private server like Digital Ocean, Heroku etc. With the challenge description in mind, I went ahead to do a reverse lookup on the URL given via &lt;a href=&quot;https://www.shodan.io/host/142.93.151.96&quot;&gt;Shodan.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Right off the bat, I saw something interesting - the IP address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;142.93.151.96&lt;/code&gt; actually has its hostname set as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y2mk.cc&lt;/code&gt;. Several ports are also opened: 22, 80, 443, 8443. This result coincides with what I would see if I were to run &lt;a href=&quot;../assets/201909_shecurity/y2mk.nmap&quot;&gt;nmap&lt;/a&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap -sc -sV -oA y2mk 142.93.151.96&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Visiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y2mk.cc&lt;/code&gt; tells me that I am on the correct path:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’re halfway there!&lt;/p&gt;

  &lt;p&gt;Yep, you’ve found something else on this vserver but you’re not quite there yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here comes the confusing part - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -i 142.93.151.96:443&lt;/code&gt; returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;400 Bad Request&lt;/code&gt; because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The plain HTTP request was sent to HTTPS port&lt;/code&gt;. This was weird, given that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; clearly tells says that I should be seeing what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y2mk.cc&lt;/code&gt; displays - after all, the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http-title&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Halfway there&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/EasterEggHunt_nmap_443&amp;amp;8443.PNG&quot; alt=&quot;EasterEggHunt_nmap_443&amp;amp;8443&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is going on here? The key lies in how web-servers serves their content. In the current internet where multiple domains can exist in one IP address, there is a need for servers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx&lt;/code&gt; to be able to serve different contents to different domain names. How this is carried out is done via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt; attribute in the request header.&lt;/p&gt;

&lt;p&gt;One thing to note is that in &lt;em&gt;this&lt;/em&gt; server, IP address and domain names are considered to be different thing - despite resolving into the same thing - and hence will serve different content. This makes sense considering the previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; error message says the server would port forward any request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;. Inputting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://y2mk.cc:8443&lt;/code&gt; as the curl parameter would have revealed the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/EasterEggHunt_IPcurl.PNG&quot; alt=&quot;EasterEggHunt_IPcurl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/EasterEggHunt_DomainCurl.PNG&quot; alt=&quot;EasterEggHunt_DomainCurl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: Please don’t portscan other people’s servers.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;forensics-not-quite-a-stego-sauras&quot;&gt;[Forensics] Not Quite A Stego-sauras&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&quot;&gt;flag.png&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -la&lt;/code&gt; showed that the image file contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;36382&lt;/code&gt; bytes and that’s &lt;em&gt;huge&lt;/em&gt;. Unfortunately, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file flag.png&lt;/code&gt; doesn’t reveal anything amiss – what about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binwalk&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/Stegosauras_Binwalk.PNG&quot; alt=&quot;Stegosauras_Binwalk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seems that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; file is hidden behind the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;png&lt;/code&gt; image, how sneaky. Unzipping it gave me the image containing the flag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: {flag-some_bytes_are_magical}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;forensics-an-image-is-worth-16-kilobits&quot;&gt;[Forensics] An Image is Worth 16 Kilobits&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&quot;&gt;image.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Same as before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -la&lt;/code&gt; reveals that this is definitely a case of steganography. This time, I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file image.jpg&lt;/code&gt; just to check if the file type is as what the filename claims to be, and oh, something looks interesting.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;image.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, comment: &quot;e2ZsYWc6NjFhM2NlNDlmYTAyMjkwZjIyYzc1MmM2YjRiZmZiZmRmY2FhYTQ3NDI4NTc4MWU1N30K&quot;, progressive, precision 8, 1500x1525, frames 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That looks like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; in the comment section. Decoding via command line gave me the flag, yay!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;e2ZsYWc6NjFhM2NlNDlmYTAyMjkwZjIyYzc1MmM2YjRiZmZiZmRmY2FhYTQ3NDI4NTc4MWU1N30K&quot; | base64 --decode

{flag:61a3ce49fa02290f22c752c6b4bffbfdfcaaa474285781e57}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Flag: {flag:61a3ce49fa02290f22c752c6b4bffbfdfcaaa474285781e57}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;forensics-reversing-101&quot;&gt;[Forensics] Reversing 101&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The challenge category is accurate.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;&quot;&gt;flag.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I quite like this challenge although it took me more than half a day to realize that the clue was literal.&lt;/p&gt;

&lt;p&gt;I started off by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; to determine the file type. The command returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.jpg: data&lt;/code&gt; which the &lt;a href=&quot;http://man7.org/linux/man-pages/man1/file.1.html&quot;&gt;man page&lt;/a&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; command clarifies that it cannot identify the contents. This lead me to investigate the hex dump of the file using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxd flag.png | head&lt;/code&gt;. We can see that the hex starts of with the consistent pattern of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...(&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/Reversing101_xxd_flag_head.PNG&quot; alt=&quot;Reversing101_xxd_flag_head&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This clearly meant that the file in question is not a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jpg&lt;/code&gt; file – or anything type of file in fact. A proper image file such as this type should have the following sequences:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000: ffd8 ffe0 0010 4a46 4946 0001            ......JFIF..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/Reversing101_xxd_flag_tail.PNG&quot; alt=&quot;Reversing101_xxd_tail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was only when I printed out the tails of the hex dump when I noticed something &lt;em&gt;realllyyy&lt;/em&gt; interesting. The bytes are actually reversed! Rearranging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIFJ......&lt;/code&gt; would become &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;......JFIF&lt;/code&gt;, the proper sequence of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jpg&lt;/code&gt; file. Wow.&lt;/p&gt;

&lt;p&gt;So here’s a quick python script to reverse each of the bytes in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.jpg&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flag.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bytes_rev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# read all items in the array, reversed
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;bytes_rev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reversed.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes_rev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the script and a new file &lt;a href=&quot;./source/reversing101/reversed.jpg&quot;&gt;reversed.jpg&lt;/a&gt; would be created. This is the flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: {flag-into_to_reversing}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;forensics-kittyforensics&quot;&gt;[Forensics] KittyForensics&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why is he sad :( ? binwalk, sleuthkit is valuable here.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;&quot;&gt;shecurity.img&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I start off with using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fls shecurity.img&lt;/code&gt; to recursively list all files and directories and determine what was within and what has been deleted from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d/d 11: lost+found
r/r * 12:       happy_kitten.jpg
r/r 13: lonelykitten.png
r/r 14: message.txt
V/V 2513:       $OrphanFiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the asterisk, I know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;happy_kitten.jpg&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inode&lt;/code&gt; 12 had been deleted. Unfortunately, recovering it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sleuthkit&lt;/code&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icat shecurity.img 12 &amp;gt; happy_kitten.png&lt;/code&gt; gave me an empty file – literally zero bytes.&lt;/p&gt;

&lt;p&gt;That said, recovering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lonelykitten.png&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message.txt&lt;/code&gt; shows me some interesting things. First of all, the size of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lonelykitten.png&lt;/code&gt; is huge - a whooping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2451544&lt;/code&gt; bytes. Neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binwalk&lt;/code&gt; nor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; reveal anything amiss. It was a PNG image, 1920 x 1080. Maybe it’s just huge? &lt;em&gt;Yes it was just huge&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message.txt&lt;/code&gt; does give me some context for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lonelykitten.png&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The kitten is sad because he lost his friend.

The half of the answer:
&quot;SearchingFor&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maybe the answer eludes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steghide&lt;/code&gt;? Nope, no success even with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steghide extract -sf lonelykitten.png -p &quot;SearchingFor&quot;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steghide: the file format of the file &quot;lonelykitten.png&quot; is not supported.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aww man, what’s going on? Googling around, I realized that maybe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foremost&lt;/code&gt; might be what I need, given that I must to crave out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lonelykitten.png&lt;/code&gt; to find out what’s wrong with it. With the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foremost shecurity.img&lt;/code&gt;, I obtained an folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt;. Lo and behold, traversing down the folder brings me to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00016546.jpg&lt;/code&gt; that clearly says: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Second part is &quot;Teefies&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/KittyForensics_HappyKitten.jpg&quot; alt=&quot;KittyForensics_HappyKitten&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Concatenating both parts of the message would reveal the flag: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SearchingForTeefies&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: SearchingForTeefies&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;crypto-all-your-base-are-belong-to-us&quot;&gt;[Crypto] All Your Base Are Belong To Us&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&quot;&gt;flag.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;=&apos;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;E2zSywCTCxvPDgvFDgHLx2fSCgHHyMv0Fq==&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter flag: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Correct! Good job.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Incorrect.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solved by my teammate, I thought that this was rather ingenious, given that I was scared away by the large amount of foreign looking codes in this flag file.&lt;/p&gt;

&lt;p&gt;From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; function, I can see that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; variable is being initialized as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;E2zSywCTCxvPDgvFDgHLx2fSCgHHyMv0Fq==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; at the back of the string, I now know that this is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; encoded string. However, gibberish was returned when I attempted to convert them into text. From the challenge title, it seems that the operation used in this decoding was customized since the title claimed that the &lt;em&gt;“base belongs to them”&lt;/em&gt;. I see that this is true from line 2 where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpha&lt;/code&gt; is initialized as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using that as the formula, the values was then pumped into a &lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Base64(&apos;&apos;,true)&quot;&gt;base64 decoder&lt;/a&gt; to get the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/BaseBelongsToUs_flag.PNG&quot; alt=&quot;BaseBelongsToUs_flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: {flag-quite_the_alphabet}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;crypto-le-chiffre&quot;&gt;[Crypto] Le Chiffre&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&quot;&gt;flag.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plaintext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;shecurity&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# array of lowercase characters where 0 = a, 1 = b, ... , 25 = z
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_lowercase&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# loop through user input character by character
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plaintext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# if the character is a lowercase ascii character
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# m1 = the index of the character from user input in the lowercase alphabet
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# k1 = the index of the key character in the alphabet
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ciphertext index becomes the index of the user input character + the index of the key, mod 26
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# convert index to character
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# not a lowercase ascii character, leave as-is
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;{xsei-nym_cmq_vj_elpxmm}&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter flag: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Correct! Good job.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Incorrect.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solved by a teammate, the challenge names directs me to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Le Chiffre cipher&lt;/code&gt;, also known as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vigenère cipher&lt;/code&gt;. Using an &lt;a href=&quot;https://cryptii.com/pipes/vigenere-cipher&quot;&gt;online tool&lt;/a&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shecurity&lt;/code&gt; as the key and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{xsei-nym_cmq_vj_elpxmm}&lt;/code&gt; as the cipher-text, the flag is obtained.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/LeChiffre_flag.PNG&quot; alt=&quot;LeChiffre_flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: {flag-the_joy_of_crypto}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;crypto-xoruteforce&quot;&gt;[Crypto] XORuteforce&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alice and Barbara are writing cryptic messages for each other. Barbara’s trashcan has a left over of a torn paper that reads :&lt;/p&gt;

  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;~cidb?%Uwlsdf&lt;/td&gt;
        &lt;td&gt;%Lv%D%H&lt;/td&gt;
        &lt;td&gt;qmx&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;p&gt;Guess the key , break the cipher, reveal the flag !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The challenge title literally directed me to carry out XOR brute force operation. &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;Online tools&lt;/a&gt; are rather handy for this type of operations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/XORuteforce.PNG&quot; alt=&quot;XORuteforce&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: {flag: Privacy Is A Myth}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;misc-teelx&quot;&gt;[Misc] TeelX&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beep Boop&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;&quot;&gt;TeeIX.wav&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Given that this is an audio steganography (&lt;em&gt;coz what else can it be&lt;/em&gt;), I first thought that it might be SSTV related. So I played the audio out in the open and started recording with a tried-and-trusted mobile app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Robot36&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/TeelX_Robot36.jpg&quot; alt=&quot;TeelX_Robot36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nope, the main display didn’t convert into an image, but what’s interesting is the bottom right panel where I can see a series of dots. That brings me to pump the audio into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sonic Visualiser&lt;/code&gt; and I added a spectrogram into the audio via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pane &amp;gt; Add Spectrogram&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/TeelX_SonicVisualiser.PNG&quot; alt=&quot;TeelX_SonicVisualiser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Given the lack of dots and dashes, I ruled out Morse code. Playing the audio multiple times though, I came to realize that it sounded suspiciously similar to the touch tone dialing sequence we had in our pre-smartphone era (&lt;em&gt;thank god I’m not that young&lt;/em&gt;). Googling brings me to the term &lt;a href=&quot;https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling&quot;&gt;Dual Tone Multi Frequency (DTMF)&lt;/a&gt;. Isolating the tone &lt;a href=&quot;https://ctftime.org/writeup/16030&quot;&gt;manually&lt;/a&gt; was complicated, but thankfully, I found &lt;a href=&quot;https://unframework.github.io/dtmf-detect/#/grid&quot;&gt;dtmf-detect&lt;/a&gt; and was able to extract the tone to the following number sequence:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;33335555224400555544447777777788333666002222555566667777777733355559999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then used an &lt;a href=&quot;https://www.dcode.fr/multitap-abc-cipher&quot;&gt;online decoder&lt;/a&gt; to solve this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Multi-tap Cipher&lt;/code&gt; and obtain the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/TeelX_Dcode_MultiTap.PNG&quot; alt=&quot;TeelX_Dcode_MultiTap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: FLAG LISTEN CLOSELY&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;puzzle-acsiing-for-a-change&quot;&gt;[Puzzle] ACSIIng For A Change&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;G 40 0 -11 -68 74 5 -13 -65 -1 91 -21 6 -11 6 -45 42 1 7 8 -19 18 -83 68 5 3 -3 -2 -2 9 6 -8 13 -89 68 5 10 -3 -11 7 -76 68 11 6 -19 18 -1 10&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Hint: If you know where you are then the next step tells you where to go.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The challenge title was a rather obvious hint that ASCII table is involved someone or another. A quick revision, the numbers in ASCII table are how computers - who only understands numbers - interprets characters. With that in mind, I referenced the table to translate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;71&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Gambling on the assumption that numbers with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; preceding the numbers are subtract operators, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;70 + 40 = 111&lt;/code&gt; would translate into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;. Continuing with that train of thought would led to the flag!&lt;/p&gt;

&lt;p&gt;Here’s a manual way of how I did it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/ACSII4Change_flag.jpg&quot; alt=&quot;ACSII4Change_flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: {flag: deltas diligently dispel doubts}&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;puzzle-lets-remain-friends&quot;&gt;[Puzzle] Let’s REMAIN friends&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Friends always give 0x100%&lt;/p&gt;

  &lt;p&gt;….—–.-….-…. ..—.—-…..-…. -……—….-.—- ..—…–…——.—-. .—-….-…——…..- .——-…….—–..— —-.——-…….- ..—.——-…..–…– .——-..–…—..—-. ..—.—-…–…..—.. …–….–…. …—–..—-…— .——–.—–….-….. ..—…–….-.—-….- .—–….–…—–….. ..——……—–.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;../assets/201909_shecurity/RemainFriends_MorseCode.jpg&quot;&gt;MorseCode.png&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/RemainFriends_MorseCode.jpg&quot; alt=&quot;RemainFriends_MorseCode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the Morse code numerals guide given, I inferred that I needed to split the given chunk of Morse into groups of five and convert them into ASCII text.&lt;/p&gt;

&lt;p&gt;Parsed Morse:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;....- ----. -.... -....
..--- .---- ..... -....
-.... ..--- ....- .----
..--- ...-- ...-- ----. ----.
.---- ....- ...-- ----. ....-
.---- ---.. ..... ----- ..---
----. ----- --... ....-
..--- .---- ---.. ...-- ...--
.---- ---.. --... ---.. ----.
..--- .---- ...-- ..... ---..
...-- ....- -....
...-- ---.. ----. ..---
.---- ----. ----- ....- .....
..--- ...-- ....- .---- ....-
.---- -.... --... ----- .....
..--- ---.. ....- ----.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Converted result:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4966  2156  6241  23399  14394  18502  9074  21833  18789  21358  346  3892  19045  23414  16705  2849
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initially confused, I only thought of converting these numbers into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decimals&lt;/code&gt; when I realized that decoding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x100&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hex&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ascii&lt;/code&gt; is impossible. Going by the challenge description of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REMIND&lt;/code&gt;, I realized that this challenge has something to do with the divider operator – more specifically &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modulo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that I know that, I then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modulo&lt;/code&gt; all converted numbers by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;256&lt;/code&gt; individually obtaining:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;102 108 97 103 58 70 114 73 101 110 90 52 101 118 65 33
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With an online &lt;a href=&quot;https://tomeko.net/online_tools/dec_to_ascii.php?lang=en&quot;&gt;decimals to ascii decoder&lt;/a&gt;, I got the flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/201909_shecurity/RemainFriends_DecimalsToAscii.PNG&quot; alt=&quot;RemainFriends_DecimalsToAscii&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag: FrIenZ4evA!&lt;/strong&gt;&lt;/p&gt;</content><author><name>BoT</name></author><category term="cybersecurity" /><category term="ctf" /><summary type="html">It has been a couple of months since I’ve step afoot into the land of raccoons Canada and I thought that is high time for me to immerse myself into the security community here at downtown Toronto.</summary></entry></feed>